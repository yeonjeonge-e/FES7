자바스크립트 Scope
✔️ 전역 스코프
- 스크립트의 어디서든 접근이 가능하기 때문에 사용이 쉽습니다.
- 타인과의 협업, 라이브러리 사용시 충돌의 가능성이 있습니다.

✔️ 함수 스코프
- 함수 외부에서 내부로의 접근은 불가하지만, 내부에서 외부로의 접근은 가능
- 함수 내부에서 정의된 변수와 매개변수는 함수 외부에서 접근할 수 없습니다.
- 함수 내부에서 정의된 변수라면 함수의 어느 부분에서도 접근 할 수 있습니다.

✔️ 블록 스코프
- 중괄호 안에서만 접근 가능합니다.
- 블록 내부에 정의된 변수는 블록의 실행이 끝나면 해제됩니다.


let z = 100;
function sum(x){ // x는 매개변수(parameter)이면서 지역변수(local val)
  let y = 50; // y는 지역변수
  z = z + y;
  return x + y;
}
console.log(sum(10));     // 60
console.log(x);           //  오류발생 x값 찾을 수 없음
console.log(y);           //  오류발생 y값 찾을 수 없음
console.log(z);           //  100
// 키워드로 인해 전역, 지역이 갈리는 것은 아닌지, let, var, const 모두 테스트 해보세요.


//  ------------------------------


// 블록 레벨 스코프
if(true){ // for문이어도 마찬가지입니다.
    let x = 10;
    const y = 10;
}
console.log(x, y)
//  출력값 : 에러발생 - x값이 정의가 안되어있음
//          why?  let과 const는 블록스코프 안에서만 형성되어 있음
//                외부에서 내부로는 접근이 불가능


예시 1)
{
  let x = 10;
  const y = 10;
}
console.log(y);
//  위 코드도 블록스코프라 오류 발생함


예시 2)
for(let i = 0; i < 10; i++){

}
console.log(i);
//  위 코드도 블록스코프라 오류 발생함


✔️ let. const는 오류가 발생하는데, 왜 var는 오류 발생이 안될까?
  --> 블록 스코프는 생긴지 얼마 안됐음
      var는 예전부터 사용하던 변수라 사용 가능한 것


//  ------------------------------


// 밖에 선언된 x는 함수 내부에서도 접근 가능합니다.
let x = 100
function xplus(){
    x = x + 10
}

xplus()
console.log(x)



// 함수가 종료된 다음에는 선언된 변수는 휘발됩니다.
function xplus(){
    let a = 100
    a = a + 10
}

xplus()
console.log(a) // Error



// 함수 안에 함수
function a(){
    console.log('a 실행')
    function b(){
        console.log('b 실행')
    }
    b()
}

a()
b() // Error

a함수는 전역공간
b함수는 a함수 (블록스코프)안에 있기 때문에 에러 발생



//  ------------------------------------------------------------



//  블록레벨 스코프를 연습하기 위해 아래 예제의 실행 결과를 예측해보세요.

let a = 10;

// 1. 함수 선언 부분
function outer() {

  // 3. 변수 선언 확인
    let b = 20;

    // 4. inner 함수 선언 부분
    function inner() {
        let c = 30;
        console.log(a, b, c);
        //  a는 10, b는 20, c는 30
        //  외부에서 내부로는 가능 !
    }

    inner();
    console.log(a, b);
    // 내부 스코프에는 a가 존재하지 않아서 밖에서 a값을 찾음
    // a는 10, b는 20
}

// 2. 함수 실행 - 함수 내부 확인함
outer();
console.log(a);